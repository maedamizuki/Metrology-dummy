import math
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d
from scipy import linalg
import sys
import re
from io import open


#path = '/Users/maedamizuki/metrology/1004/MEASURE5.TXT'
#file = open(sys.argv[1])
def main():
   filenum = []
   for i in range(39):
      filenum.append(i+1)
   print(filenum)
   
   i=0
   X2=[]
   Y2=[]
   Z2=[]
 #  for i in range(len(filenum)):
   for i in range(2):
      path = '/Users/maedamizuki/metrology/0117/flatness4000/'+str(filenum[i])+'.TXT'
      print(i)
      with open(path,'r',encoding='shift_jis') as f1:
         lines = f1.readlines()
      lines_strip = [line.strip() for line in lines]
      X1 = [line for line in lines_strip if 'X' in line]
      Y1 = [line for line in lines_strip if 'Y' in line]
      Z1 = [line for line in lines_strip if 'Z' in line]
      print(X1)

      pattern=r'([+-]?[0-9]+\.?[0-9]*)'

      XX2 = [float(s) for s in re.findall(pattern,str(X1))]
      YY2 = [float(s) for s in re.findall(pattern,str(Y1))]
      ZZ2 = [float(s) for s in re.findall(pattern,str(Z1))]
      for n in range(len(XX2)):
         print(n)
         X2.append(XX2[i])
         Y2.append(YY2[i])
         Z2.append(ZZ2[i])
   print(X2,Y2)
#X22 = np.square(X2)
#Y22 = np.square(Y2)
   point_list=[X2,Y2]
   X = np.array(point_list).T
   Z = np.array(Z2)
   Xtil = np.c_[np.ones(X.shape[0]),X]
   A = np.dot(Xtil.T,Xtil)
   b = np.dot(Xtil.T,Z)
   w = linalg.solve(A,b)
   print(w[0],w[1],w[2])
   ZT = np.array(Z2).T
   dis = ZT*Z
#print(dis)
   xmesh, ymesh = np.meshgrid(np.linspace(-10,38,1000),np.linspace(-10,22,1000))
   zmesh = (w[0]+w[1]*xmesh.ravel()+w[2]*ymesh.ravel()).reshape(xmesh.shape)



#3d plot code
   fig = plt.figure()
   ax  = fig.add_subplot(111,projection='3d')
   p=ax.scatter(X2,Y2,Z2,s=5,c=Z2,cmap=plt.cm.jet)
   plt.colorbar(p)
#   p=ax.plot_wireframe(xmesh,ymesh,zmesh,color='r')

#   ax.text(-20,-20,-0.01,"a="+str(('{:.4f}'.format(w[0])))+"\n"+"b="+str(('{:.4f}'.format(w[1])))+"\n"+"c="+str(('{:.4f}'.format(w[2]))),size=10,color='k')
   p=ax.set_xlabel("x[mm]")
   p=ax.set_ylabel("y[mm]")
   p=ax.set_zlabel("z[mm]")

   dis = Z - np.dot(Xtil,w)
   dis1 = np.square(dis)
   E = sum(dis1)
   fig.show()
#print(dis)
#print(E)
   disstotal=[]
   #create the histgram about the distance from optimized plane to data
   for i in range(len(Z2)):
      diss1=0.0
      diss1=(-Z2[i]+w[1]*X2[i]+w[0]+w[2]*Y2[i])/math.sqrt(w[1]**2+w[2]**2+(1.0)**2)
      if i==0:
         continue
      disstotal.append("{:.20f}".format(diss1))
      i+=1
   print(disstotal)
   print(len(disstotal))
   disstotal1=[float(s) for s in disstotal]
   fig2 = plt.figure()
   plt.title('distance')
   plt.xlabel('distance[mm]')
   plt.ylabel('events')
   plt.hist(disstotal1,bins=70,range=(-0.1,0.1))
   plt.show()

   f = open(sys.argv[2],'w')
   f.write(str(disstotal))
   f.close()

#ROOT code
#   cv = TCanvas("cv","c1",850,600)
#   cv.Divide(2,2)
#   g1 = TH1F("h2","FlexModule",50,-0.1,0.1)

#   for i in xrange(len(Z2)):
#      diss = 0.0
#      diss = Z2[i]-(w[0]+w[1]*X2[i]+w[2]*Y2[i])
#      g1.Fill(diss)
#      i+=1
#   g1.SetTitle("flatness;#Delta z[mm];events")
#   g1.SetMarkerStyle(20)
#   g1.SetMarkerSize(1)
#   cv.cd(1)
#   g1.Draw("")
#   g1.Fit("gaus","i")
#   gStyle.SetStatH(0.15)
#   gStyle.SetStatW(0.15)
#   gStyle.SetOptFit(1)


#   distotal=0.0                 

#   g4 = TH1F("h4","SSR",50,0,0.005)
#   for i in xrange(len(Z2)):
#      dis2 =0.0
#      dis=0.0
#      dis = Z2[i]-(w[0]+w[1]*X2[i]+w[2]*Y2[i])
#      dis2 = dis*dis
#      g4.Fill(dis2)
#      distotal = distotal+dis2
#      i+=1
#   print math.sqrt(distotal/i),i
#   g4.SetTitle("SSR;[mm^2];events")
#   g4.SetMarkerStyle(20)
#   g4.SetMarkerSize(1)
#   cv.cd(2)
#   g4.Draw("")


#print(diss)

#   cv2 = TCanvas("cv2","c2",850,600)
#   g2 = TH1F("h2","flatness",50,0,0.1)
   
#   for i in xrange(len(Z2)):
#      diss1 = 0.0
#      diss1 = abs(-Z2[i]+w[1]*X2[i]+w[0]+w[2]*Y2[i])/math.sqrt((w[1])**2+(w[2])**2+(1.0)**2)
#      g2.Fill(diss1)
#      i+=1
#   g2.SetTitle("Flatness;#Delta d[mm];events")
#   g2.SetMarkerStyle(20)
#   g2.SetMarkerSize(1)
#   cv.cd(3)
#   g2.Draw("")


#   cv3 = TCanvas("cv3","c3",850,600)
#   g3 = TH1F("h2","flatness",50,-0.1,0.1)
   
#   for i in xrange(len(Z2)):
#      diss1 = 0.0
#      diss1 = (-Z2[i]+w[1]*X2[i]+w[0]+w[2]*Y2[i])/math.sqrt((w[1])**2+(w[2])**2+(1.0)**2)
#      g3.Fill(diss1)
#      i+=1
   #print(diss1)
#   g3.SetTitle("Flatness;#Delta d[mm];events")
#   g3.SetMarkerStyle(20)
#   g3.SetMarkerSize(1)
#   cv.cd(4)
#   g3.Draw("")
#   g3.Fit("gaus","i")
#   gStyle.SetStatH(0.15)
#   gStyle.SetStatW(0.15)
#   gStyle.SetOptFit(1)#


#   cv.SaveAs("test.png")

main()
